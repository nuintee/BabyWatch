<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BabyWatch</title>
    <link rel="stylesheet" href="index.css">
    <link href="manifest.json" crossorigin= "use-credentials" rel="manifest" >
    <script async src="https://cdn.jsdelivr.net/npm/pwacompat" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.2/css/all.css" integrity="sha384-vSIIfh2YWi9wW0r9iZe7RJPrKwp6bG+s9QZMoITbCckVJqGCCRhc+ccxNcdpHuYu" crossorigin="anonymous">
</head>
<body>
    <div class = "drawer">
        <header class="header">
            <div class="top-header">
                <button onclick="drawer()" class="nav-btn"><i class="fas fa-bars"></i></button>
                <h4 class = "title">アナリティクス</h4>
            </div>
        </header>
        <!-- <table>
            <thead>
                <tr>
                    <th scope="col">行動</th>
                    <th scope="col">詳細</th>
                    <th scope="col">時間</th>
                    <th scope="col">最新</th>
                </tr>
            </thead>
            <tbody>
                <%# 最新のものから表示 %>
                <%for (let i = data.length - 1; i >= 0; i--)  {%>
                <%# Formatting Time %>
                <% let formated = data[i].when.match(/((?<=-)\d.|(?<=[a-zA-Z])\d.|(?<=:)\d.{1})/gi) %>
                <% let month = formated[0] %>
                <% let date = formated[1] %>
                <% let hour = formated[2] %>
                <% let minutes = formated[3] %>
                <% const time = `${month}/${date} ${hour}:${minutes}` %>
                <tr>
                    <th scope="row"><%= i + 1 %></th>
                    <td><%= data[i].who%></td>
                    <td><%= time %></td>
                    <td><%= data[i].what%></td>
                    <td>
                        <% if (data[i].what == 'ミルク') { %>
                        <%=     data[i].portion%><small>ml</small>
                        <% };%>
                    </td>
                </tr>
                <%} %> 
            </tbody>
        </table> -->
    </div>
    <header class = "header">
        <div class = "top-header">
            <button onclick="drawer()" class="nav-btn"><i class="fas fa-bars"></i></button>
            <h4 class = "title">ホーム</h4>
            <span class = "select-wrapper">
                <select id="form-select" name = "who">
                    <option value="Sho" name = "Sho">Sho</option>
                    <option value="Non" name = "Non">Non</option>
                </select>
            </span>
            <!-- <button onclick="location.reload()" class="nav-btn"> 更新 </button> -->
        </div>
    </header>
    <form action = "/api" method = "POST"  id = "main-form"  onsubmit="return check(this)">
        <div class ="cards">
            <div class = "top-cards">
                <h4>ミルク</h4>
                <% let milkIndex = data.reverse().find((item) => item.what == 'ミルク') %>
                    <% if (milkIndex) { %>
                        <!-- Dummy Value Holder -->
                        <div style="display: none;" class="latestTarget"><%= milkIndex.when %></div>
                        <h4 class = "latestDisplay" id = "latestMilk">-分前</h4>
                    <% } else { %>
                        <%= "まだデータがありません" %>
                    <% } %>
            </div>
            <div class = "bottom-cards">
                <input id = "milkPortion" class="card-input green"  type = "number" min = "0"  step="5" value = "20" name = "portion" placeholder="ml">
                <input type = "submit" class = "actionBtns green" name = "what" value = "ミルク" >
            </div>
        </div>
        <div class="cards">
            <div class ="top-cards">
            <h4>オムツ</h4>
                <% let diaperIndex = data.find((item) => item.what == 'オムツ') %>
                <% if (diaperIndex) { %>
                <!-- Dummy Value Holder -->
                <div style="display: none;" class="latestTarget"><%= diaperIndex.when %></div>
                <h4 class = "latestDisplay" id = "latestDiaper">-分前</h4>
                <% } else { %>
                <%= "まだデータがありません"　 %>
                <% } %>
            </div>
            <div class="bottom-cards">
                <!-- <input autofocus id = "diaperType" class="card-input" type = "number" min = "0" value = "20" step="5" name = "diaperType"> -->
                <select class="card-input purple">
                    <option value="poo">オシッコ</option>
                    <option value="pee">ウンチ</option>
                </select>
                <input type= "submit" class = "actionBtns purple" name = "what" value= "オムツ">
            </div>
        </div>
    </form>
    <style>
        .drawer {
            position: absolute;
            top:0;
            left:-100%;
            background-color: #FFF;
            transition-duration: 0.5s;
            height:100%;
            width:100%;
            margin:0;
            z-index: 100;
        }

        .drawer.on{
            transition-duration: 0.5s;
            left:0%;
        }
    </style>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        let time;
        const actionBtns = document.getElementsByClassName('actionBtns');
        const latestTarget = document.getElementsByClassName('latestTarget');
        const latestDisp = document.getElementsByClassName('latestDisplay');
        let pressedBtn;
        let whoisTarget
        //初期Y座標取得
        let startY;
        const body = document.body;
        
        //Pull To Refresh -->

        if (!window.TouchEvent){
            alert('no')
        }

        //タッチ開始
        body.addEventListener('touchstart',e => {
            startY = e.touches[0].pageY;
        },{passive : true})

        body.addEventListener('touchend',e => {
            const y = e.changedTouches[0].pageY
            if (document.scrollingElement.scrollTop <= 0 && y > startY &&
            !document.body.classList.contains('refreshing')){
                location.reload();
            }
        })

        //<--

        //socket io
        let socket = io()

        function emu(){
            location.reload()
        }

        socket.on('reload page', msg =>{
            setTimeout(emu,1000)
        })
        

        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('sw.js').then(async (registration) => {
                console.log('ServiceWorker registration successful with scope: ', registration.scope);
            }).catch((err) => {
                console.log('ServiceWorker registration failed: ', err);
            });
        }

        // 前回の担当者をデフォルト選択　-->
        if (localStorage){
            if (!localStorage.getItem('whois')){
                console.log('Empty Storage')
            } else {
                whoisTarget = Number(localStorage.getItem('whois'))
                let whoTarget = document.getElementById('form-select')
                whoTarget[whoisTarget].selected = true
                 // 選択切り替え時に担当者設定　-->
                whoTarget.addEventListener('change',function(){
                    let whoWas = whoTarget.selectedIndex
                    localStorage.setItem("whois",whoWas)
                },false);
            // <--
            }
        }
        else {
            console.log('localStorage unavailable!')
        }

        //Time Update -->
        let timeUpdate = () => {
            time = new Date()
            for (let i = 0; i < latestTarget.length; i++){
                let oldDate = new Date(latestTarget[i].innerText)
                let oldHour = oldDate.getHours();
                oldDate.setHours(oldHour - 9)
                let dateDiff = Math.round((time - oldDate) / 60000)
                if (dateDiff >= 60){
                    dateDiff /= 60;
                    latestDisp[i].innerText = `約${Math.round(dateDiff * 10) / 10}時間前`
                } else {
                    latestDisp[i].innerText = `${dateDiff}分前`
                }
            }
        }
        setInterval(timeUpdate,1000)
        // <--

        //送信ボタン
        for (let i = 0; i < actionBtns.length; i++){
            actionBtns[i].addEventListener('click',function(e){
                pressedBtn = e.target.value
            },false)
        }

        function drawer(){
            let drawerTarget = document.getElementsByClassName('drawer')[0];

            drawerTarget.classList.toggle('on')
        }


        function check(e){

            let whoTarget = document.getElementById('form-select')
            let whoIndex = whoTarget.selectedIndex
            let who = whoTarget[whoIndex].value

            let portion = document.getElementById('milkPortion');
            if (portion.value == ''){
                portion.value = 0;
            }
            else {
                console.log(portion.value)
            }
            let question;

            if (pressedBtn == 'ミルク'){
                question = `${who}さんが${pressedBtn}を${portion.value}mlあげました`;
            }
            else if (pressedBtn == 'オムツ'){
                question = `${who}さんが${pressedBtn}を交換しました`;
            }
            let answer = confirm(question);

            if (answer == false){ 
                return false
            }
            else {
                socket.emit('updated',{value : "true"})
                return true
            }
        }

    </script>
</body>
</html>